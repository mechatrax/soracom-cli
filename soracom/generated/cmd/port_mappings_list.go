// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"net/url"

	"os"
	"strings"

	"github.com/spf13/cobra"
)

// PortMappingsListCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var PortMappingsListCmdLastEvaluatedKey string

// PortMappingsListCmdLimit holds value of 'limit' option
var PortMappingsListCmdLimit int64

func init() {
	PortMappingsListCmd.Flags().StringVar(&PortMappingsListCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The last Port Mapping ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward."))

	PortMappingsListCmd.Flags().Int64Var(&PortMappingsListCmdLimit, "limit", 0, TRAPI("Maximum number of results per response page."))

	PortMappingsCmd.AddCommand(PortMappingsListCmd)
}

// PortMappingsListCmd defines 'list' subcommand
var PortMappingsListCmd = &cobra.Command{
	Use:   "list",
	Short: TRAPI("/port_mappings:get:summary"),
	Long:  TRAPI(`/port_mappings:get:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}

		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectPortMappingsListCmdParams(ac)
		if err != nil {
			return err
		}

		_, body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		return prettyPrintStringAsJSON(body)

	},
}

func collectPortMappingsListCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForPortMappingsListCmd("/port_mappings"),
		query:  buildQueryForPortMappingsListCmd(),
	}, nil
}

func buildPathForPortMappingsListCmd(path string) string {

	return path
}

func buildQueryForPortMappingsListCmd() string {
	result := []string{}

	if PortMappingsListCmdLastEvaluatedKey != "" {
		result = append(result, sprintf("%s=%s", url.QueryEscape("last_evaluated_key"), url.QueryEscape(PortMappingsListCmdLastEvaluatedKey)))
	}

	if PortMappingsListCmdLimit != 0 {
		result = append(result, sprintf("%s=%s", url.QueryEscape("limit"), url.QueryEscape(sprintf("%d", PortMappingsListCmdLimit))))
	}

	return strings.Join(result, "&")
}
