// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"net/url"

	"os"
	"strings"

	"github.com/spf13/cobra"
)

// DevicesGetResourceCmdDeviceId holds value of 'device_id' option
var DevicesGetResourceCmdDeviceId string

// DevicesGetResourceCmdInstance holds value of 'instance' option
var DevicesGetResourceCmdInstance string

// DevicesGetResourceCmdObject holds value of 'object' option
var DevicesGetResourceCmdObject string

// DevicesGetResourceCmdResource holds value of 'resource' option
var DevicesGetResourceCmdResource string

// DevicesGetResourceCmdModel holds value of 'model' option
var DevicesGetResourceCmdModel bool

func init() {
	DevicesGetResourceCmd.Flags().StringVar(&DevicesGetResourceCmdDeviceId, "device-id", "", TRAPI("Target device"))

	DevicesGetResourceCmd.MarkFlagRequired("device-id")

	DevicesGetResourceCmd.Flags().StringVar(&DevicesGetResourceCmdInstance, "instance", "", TRAPI("Instance ID"))

	DevicesGetResourceCmd.MarkFlagRequired("instance")

	DevicesGetResourceCmd.Flags().StringVar(&DevicesGetResourceCmdObject, "object", "", TRAPI("Object ID"))

	DevicesGetResourceCmd.MarkFlagRequired("object")

	DevicesGetResourceCmd.Flags().StringVar(&DevicesGetResourceCmdResource, "resource", "", TRAPI("Resource ID"))

	DevicesGetResourceCmd.MarkFlagRequired("resource")

	DevicesGetResourceCmd.Flags().BoolVar(&DevicesGetResourceCmdModel, "model", false, TRAPI("Whether or not to add model information"))

	DevicesCmd.AddCommand(DevicesGetResourceCmd)
}

// DevicesGetResourceCmd defines 'get-resource' subcommand
var DevicesGetResourceCmd = &cobra.Command{
	Use:   "get-resource",
	Short: TRAPI("/devices/{device_id}/{object}/{instance}/{resource}:get:summary"),
	Long:  TRAPI(`/devices/{device_id}/{object}/{instance}/{resource}:get:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}

		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectDevicesGetResourceCmdParams(ac)
		if err != nil {
			return err
		}

		_, body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		return prettyPrintStringAsJSON(body)

	},
}

func collectDevicesGetResourceCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForDevicesGetResourceCmd("/devices/{device_id}/{object}/{instance}/{resource}"),
		query:  buildQueryForDevicesGetResourceCmd(),
	}, nil
}

func buildPathForDevicesGetResourceCmd(path string) string {

	escapedDeviceId := url.PathEscape(DevicesGetResourceCmdDeviceId)

	path = strings.Replace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	escapedInstance := url.PathEscape(DevicesGetResourceCmdInstance)

	path = strings.Replace(path, "{"+"instance"+"}", escapedInstance, -1)

	escapedObject := url.PathEscape(DevicesGetResourceCmdObject)

	path = strings.Replace(path, "{"+"object"+"}", escapedObject, -1)

	escapedResource := url.PathEscape(DevicesGetResourceCmdResource)

	path = strings.Replace(path, "{"+"resource"+"}", escapedResource, -1)

	return path
}

func buildQueryForDevicesGetResourceCmd() string {
	result := []string{}

	if DevicesGetResourceCmdModel != false {
		result = append(result, sprintf("%s=%s", url.QueryEscape("model"), url.QueryEscape(sprintf("%t", DevicesGetResourceCmdModel))))
	}

	return strings.Join(result, "&")
}
