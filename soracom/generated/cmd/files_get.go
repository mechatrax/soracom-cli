// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"net/url"

	"os"
	"strings"

	"github.com/spf13/cobra"
)

// FilesGetCmdPath holds value of 'path' option
var FilesGetCmdPath string

// FilesGetCmdScope holds value of 'scope' option
var FilesGetCmdScope string

func init() {
	FilesGetCmd.Flags().StringVar(&FilesGetCmdPath, "path", "", TRAPI("Target path"))

	FilesGetCmd.MarkFlagRequired("path")

	FilesGetCmd.Flags().StringVar(&FilesGetCmdScope, "scope", "", TRAPI("Scope of the request"))

	FilesGetCmd.MarkFlagRequired("scope")

	FilesCmd.AddCommand(FilesGetCmd)
}

// FilesGetCmd defines 'get' subcommand
var FilesGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/files/{scope}/{path}:get:summary"),
	Long:  TRAPI(`/files/{scope}/{path}:get:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}

		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectFilesGetCmdParams(ac)
		if err != nil {
			return err
		}

		_, body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		_, err = os.Stdout.Write([]byte(body))
		return err

	},
}

func collectFilesGetCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForFilesGetCmd("/files/{scope}/{path}"),
		query:  buildQueryForFilesGetCmd(),
	}, nil
}

func buildPathForFilesGetCmd(path string) string {

	escapedPath := harvestFilesPathEscape(FilesGetCmdPath)

	path = strings.Replace(path, "{"+"path"+"}", escapedPath, -1)

	escapedScope := url.PathEscape(FilesGetCmdScope)

	path = strings.Replace(path, "{"+"scope"+"}", escapedScope, -1)

	return path
}

func buildQueryForFilesGetCmd() string {
	result := []string{}

	return strings.Join(result, "&")
}
